* Lazily

This package simply provides the macro =lazily-do= for use in Emacs
configuration files. It only does one thing. You can wrap any configuration
steps in the macro without having to worry about void-variable messages or
void-function errors. In the example below =good-list= is declared, but Emacs
doesn't know about =bad-list= yet. This will throw a void-variable error.

#+BEGIN_SRC emacs-lisp
(defvar good-list nil)
(lazily-do
 (add-to-list 'good-list 1)
 (add-to-list 'bad-list 1))
#+END_SRC

We have a couple of options here. We could figure out which library defines
=bad-list= and use =with-eval-after-load= like this

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'bad-library
 (add-to-list 'bad-list 1))
#+END_SRC

We could also explicitly require =bad-library=, which might be slow, or do
something else. The way =lazily-do= works is it stores the forms in a list and
tries again to eval those forms (in order) every time a new library is
loaded. It accomplishes this through using the =after-load-functions= hook.

To illustrate, suppose we had the original example in our config. The form with
=good-list= will execute fine and there will be no difference to having this
form at the top level. The one with =bad-list= throws a void-variable error
which is caught and the form is saved for later. We do some work and eventually
something calls or loads bad-library. This fires =lazily--redo= to try the saved
forms again, and now that =bad-list= is defined the original error goes away and
everything is dandy.

** Configuration options
   - =lazily-is-quiet=: Set this variable to =nil= if you want to log bad forms
     when they are found.
